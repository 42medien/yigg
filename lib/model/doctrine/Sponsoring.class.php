<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Sponsoring extends BaseSponsoring
{
  const NEW_SPONSORING = 0, ACTIVE = 1, REMINDED = 2, FINAL_REMINDER = 3;

  /**
   * Returns a link for a paypal cancel link
   *
   * @return String for controller url generation/
   */
  public function getPaypalCancelLink()
  {
    return '@sponsoring_paypal_cancel?id=' . $this->id;
  }

  /**
   * Returns a link for a paypal success link
   *
   * @return String for controller url generation/
   */
  public function getPaypalSuccessLink()
  {
    return '@sponsoring_paypal_success?id=' . $this->id;
  }

  /**
   * Returns a link for editing this sponsorship.
   *
   * @return String for controller url generation/
   */
  public function getEditLink()
  {
    return 'https://backend.yigg.de/sponsoring/' . $this->id . "/edit";
  }

  /**
   * generates a preview link.
   */
  public function getPreviewLink()
  {
    return '@sponsoring_order_preview?id=' . $this->id;
  }

  /**
   * Returns a link for getting the completion link.
   *
   * @return String for controller url generation/
   */
  public function getOrderCompleteLink()
  {
    return '@sponsoring_order_complete?id='. $this->id;
  }

  /**
   * Returns an image from a validated file.
   *
   * @param sfValidatorFile validated_file
   */
  public static function createImage( $validated_file , $place )
  {
    $time = time();
    $name = "sponsoring-" . sha1($time);

    // create thumbnail (sfThumbnailPlugin)
    $directory = sfConfig::get('sf_upload_dir') . DIRECTORY_SEPARATOR .
    'images' . DIRECTORY_SEPARATOR .
    'sponsorings' . DIRECTORY_SEPARATOR .
    'thumbnails';

    $path = yiggFileTools::mkdir( $directory ) . DIRECTORY_SEPARATOR . $name;

    //ensure the path is unqiue.
    while( yiggFileTools::hasFile( $path ) )
    {
      $path = yiggFileTools::mkdir( $directory ) . DIRECTORY_SEPARATOR . $name;
    }

    // Create the thumbnail
    $thumbnail = new sfThumbnail($place->width, $place->height,false, true);
    $thumbnail->loadFile( $validated_file->getTempName() );
    $thumbnail->save( $path . ".png" , 'image/png');

    // save file
    $file = File::createFromValidatedFile( $validated_file, "sponsorings", $name);
    return $file;
  }

  /**
   * Creates a new object from the form data.
   *
   * @param array $data
   * @return Sponsoring
   */
  public static function create( $data )
  {
    $sponsoring = new self();
    $sponsoring->fromArray($data);
    $sponsoring->status = self::NEW_SPONSORING;
    $weeks = (int) (array_key_exists( $data['weeks'], sfConfig::get("app_sponsoring_terms")) ? $data['weeks'] : 1 );
    $sponsoring->expires = yiggTools::getDbDate(null, strtotime("+ $weeks weeks",  time()) );
    $sponsoring->save();
    return $sponsoring;
  }

  /**
   * Returns the description of this sponsoring for use
   * within transaction detail fields.
   *
   * @return String the transaction description
   */
  public function getTransactionDescription()
  {
    return '[Yigg] Sponsoring #' . $this->id.': ' . $this->SponsoringPlace->description;
  }

  /**
   * Updates this sponsoring to a successful payment.
   *
   * @return void
   */
  public function setHasPayed()
  {
    $this->payed = true;
    $this->status = self::ACTIVE;
    $this->save();
  }

  /**
   * Calculate the date a sponsoring expires (formatted or unix_Timestamp)
   * @return String
   */
  public function getExpirationDate($formatted=true)
  {
    $date = strtotime($this->expires);
    if($formatted)
    {
      return date('d.m.y', $date );
    }
    else
    {
      return $date;
    }
  }

  /**
   * returns the amount of months this sponsoring is booked for.
   */
  public function getWeeks()
  {
    return round( (strtotime($this->expires) - strtotime($this->created_at) ) / (60*60*24*7), 0);
  }

  /**
   * Returns this sponsorings current Monthly price.
   */
  public function getWeeklyPrice()
  {
    return $this->Deal->debit / $this->getWeeks();
  }

  /**
   * Retrieve the created_at as a formatted date
   * @return String
   */
  public function getFormattedCreatedAt()
  {
    return date('d.m.y', strtotime($this->created_at));
  }

  /**
   * check if a Sponsoring should be displayed or is expired
   * @return Boolean
   */
  public function isActive()
  {
    $exp_date = strtotime( $this->expires );
    if( $exp_date >= time() )
    {
      return true;
    }
    return false;
  }
}
