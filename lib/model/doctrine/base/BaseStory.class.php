<?php

/**
 * BaseStory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $title
 * @property string $internal_url
 * @property string $external_url
 * @property string $description
 * @property integer $type
 * @property integer $user_id
 * @property integer $domain_id
 * @property User $Author
 * @property Doctrine_Collection $Ratings
 * @property Domain $Domain
 * @property Doctrine_Collection $Renders
 * @property Doctrine_Collection $Comments
 * @property Doctrine_Collection $Tags
 * @property Doctrine_Collection $Tweets
 * @property Doctrine_Collection $History
 * @property Doctrine_Collection $StoryComment
 * @property Doctrine_Collection $StoryRating
 * @property Doctrine_Collection $StoryRedirect
 * @property Doctrine_Collection $StoryTweet
 * 
 * @method integer             getId()            Returns the current record's "id" value
 * @method string              getTitle()         Returns the current record's "title" value
 * @method string              getInternalUrl()   Returns the current record's "internal_url" value
 * @method string              getExternalUrl()   Returns the current record's "external_url" value
 * @method string              getDescription()   Returns the current record's "description" value
 * @method integer             getType()          Returns the current record's "type" value
 * @method integer             getUserId()        Returns the current record's "user_id" value
 * @method integer             getDomainId()      Returns the current record's "domain_id" value
 * @method User                getAuthor()        Returns the current record's "Author" value
 * @method Doctrine_Collection getRatings()       Returns the current record's "Ratings" collection
 * @method Domain              getDomain()        Returns the current record's "Domain" value
 * @method Doctrine_Collection getRenders()       Returns the current record's "Renders" collection
 * @method Doctrine_Collection getComments()      Returns the current record's "Comments" collection
 * @method Doctrine_Collection getTags()          Returns the current record's "Tags" collection
 * @method Doctrine_Collection getTweets()        Returns the current record's "Tweets" collection
 * @method Doctrine_Collection getHistory()       Returns the current record's "History" collection
 * @method Doctrine_Collection getStoryComment()  Returns the current record's "StoryComment" collection
 * @method Doctrine_Collection getStoryRating()   Returns the current record's "StoryRating" collection
 * @method Doctrine_Collection getStoryRedirect() Returns the current record's "StoryRedirect" collection
 * @method Doctrine_Collection getStoryTweet()    Returns the current record's "StoryTweet" collection
 * @method Story               setId()            Sets the current record's "id" value
 * @method Story               setTitle()         Sets the current record's "title" value
 * @method Story               setInternalUrl()   Sets the current record's "internal_url" value
 * @method Story               setExternalUrl()   Sets the current record's "external_url" value
 * @method Story               setDescription()   Sets the current record's "description" value
 * @method Story               setType()          Sets the current record's "type" value
 * @method Story               setUserId()        Sets the current record's "user_id" value
 * @method Story               setDomainId()      Sets the current record's "domain_id" value
 * @method Story               setAuthor()        Sets the current record's "Author" value
 * @method Story               setRatings()       Sets the current record's "Ratings" collection
 * @method Story               setDomain()        Sets the current record's "Domain" value
 * @method Story               setRenders()       Sets the current record's "Renders" collection
 * @method Story               setComments()      Sets the current record's "Comments" collection
 * @method Story               setTags()          Sets the current record's "Tags" collection
 * @method Story               setTweets()        Sets the current record's "Tweets" collection
 * @method Story               setHistory()       Sets the current record's "History" collection
 * @method Story               setStoryComment()  Sets the current record's "StoryComment" collection
 * @method Story               setStoryRating()   Sets the current record's "StoryRating" collection
 * @method Story               setStoryRedirect() Sets the current record's "StoryRedirect" collection
 * @method Story               setStoryTweet()    Sets the current record's "StoryTweet" collection
 * 
 * @package    yigg
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseStory extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('story');
        $this->hasColumn('id', 'integer', 11, array(
             'primary' => true,
             'autoincrement' => true,
             'type' => 'integer',
             'length' => 11,
             ));
        $this->hasColumn('title', 'string', 128, array(
             'notnull' => true,
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('internal_url', 'string', 128, array(
             'notnull' => true,
             'type' => 'string',
             'unique' => true,
             'length' => 128,
             ));
        $this->hasColumn('external_url', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', 1000000, array(
             'notnull' => true,
             'type' => 'string',
             'length' => 1000000,
             ));
        $this->hasColumn('type', 'integer', null, array(
             'notnull' => true,
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('user_id', 'integer', 11, array(
             'notnull' => true,
             'type' => 'integer',
             'length' => 11,
             ));
        $this->hasColumn('image_id', 'string', 20, array(
            'type' => 'integer',
            'length' => 20,
        ));
        $this->hasColumn('domain_id', 'integer', 20, array(
             'type' => 'integer',
             'length' => 20,
             ));


        $this->index('story_internal_url', array(
             'fields' => 'internal_url',
             ));
        $this->index('story_external_url', array(
             'fields' => 'external_url',
             ));
        $this->index('story_created_at', array(
             'fields' => 'created_at',
             ));
        $this->index('story_epoch_time', array(
             'fields' => 'epoch_time',
             'sorting' => 'DESC',
             ));
        $this->index('story_is_deleted', array(
             'fields' => 'deleted_at',
             ));
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('User as Author', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasMany('Rating as Ratings', array(
             'refClass' => 'StoryRating',
             'local' => 'story_id',
             'foreign' => 'rating_id'));

        $this->hasOne('Domain', array(
             'local' => 'domain_id',
             'foreign' => 'id'));

        $this->hasMany('StoryRender as Renders', array(
             'local' => 'id',
             'foreign' => 'story_id'));

        $this->hasMany('Comment as Comments', array(
             'refClass' => 'StoryComment',
             'local' => 'story_id',
             'foreign' => 'comment_id'));

        $this->hasMany('Tag as Tags', array(
             'refClass' => 'StoryTag',
             'local' => 'story_id',
             'foreign' => 'tag_id'));

        $this->hasMany('Tweet as Tweets', array(
             'refClass' => 'StoryTweet',
             'local' => 'story_id',
             'foreign' => 'tweet_id'));

        $this->hasMany('History', array(
             'local' => 'id',
             'foreign' => 'story_id'));

        $this->hasMany('StoryComment', array(
             'local' => 'id',
             'foreign' => 'story_id'));

        $this->hasMany('StoryRating', array(
             'local' => 'id',
             'foreign' => 'story_id'));

        $this->hasMany('StoryRedirect', array(
             'local' => 'id',
             'foreign' => 'story_id'));

        $this->hasMany('StoryTweet', array(
             'local' => 'id',
             'foreign' => 'story_id'));

        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'unique' => true,
             'fields' => 
             array(
              0 => 'title',
             ),
             'length' => 128,
             'name' => 'internal_url',
             ));
        $yiggdescription0 = new yiggDescription();
        $yiggsoftdelete0 = new yiggSoftDelete();
        $yiggepoch0 = new yiggEpoch();
        $yiggtaggable0 = new yiggTaggable();
        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'updated' => 
             array(
              'name' => 'last_edited',
              'type' => 'timestamp',
             ),
             'created' => 
             array(
              'name' => 'created_at',
              'type' => 'timestamp',
             ),
             ));
        $this->actAs($sluggable0);
        $this->actAs($yiggdescription0);
        $this->actAs($yiggsoftdelete0);
        $this->actAs($yiggepoch0);
        $this->actAs($yiggtaggable0);
        $this->actAs($timestampable0);
    }
}