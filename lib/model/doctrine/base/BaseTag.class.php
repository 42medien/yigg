<?php

/**
 * BaseTag
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property Doctrine_Collection $Users
 * @property Doctrine_Collection $Stories
 * @property Doctrine_Collection $Story
 * 
 * @method integer             getId()      Returns the current record's "id" value
 * @method string              getName()    Returns the current record's "name" value
 * @method Doctrine_Collection getUsers()   Returns the current record's "Users" collection
 * @method Doctrine_Collection getStories() Returns the current record's "Stories" collection
 * @method Doctrine_Collection getStory()   Returns the current record's "Story" collection
 * @method Tag                 setId()      Sets the current record's "id" value
 * @method Tag                 setName()    Sets the current record's "name" value
 * @method Tag                 setUsers()   Sets the current record's "Users" collection
 * @method Tag                 setStories() Sets the current record's "Stories" collection
 * @method Tag                 setStory()   Sets the current record's "Story" collection
 * 
 * @package    yigg
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTag extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('tag');
        $this->hasColumn('id', 'integer', 11, array(
             'primary' => true,
             'autoincrement' => true,
             'type' => 'integer',
             'length' => 11,
             ));
        $this->hasColumn('name', 'string', 128, array(
             'notnull' => true,
             'type' => 'string',
             'unique' => true,
             'length' => 128,
             ));

        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('User as Users', array(
             'refClass' => 'UserTag',
             'local' => 'tag_id',
             'foreign' => 'user_id'));

        $this->hasMany('Story as Stories', array(
             'refClass' => 'StoryTag',
             'local' => 'tag_id',
             'foreign' => 'story_id'));

        $this->hasMany('Story', array(
             'refClass' => 'StoryTag',
             'local' => 'story_id',
             'foreign' => 'id'));

        $yiggmultiplereference0 = new yiggMultipleReference(array(
             ));
        $this->actAs($yiggmultiplereference0);
    }
}