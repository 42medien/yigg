<?php

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $username
 * @property string $salt
 * @property string $password
 * @property boolean $status
 * @property timestamp $last_login
 * @property string $email
 * @property boolean $privacy
 * @property string $last_ip
 * @property integer $failed_logins
 * @property integer $avatar_id
 * @property enum $award_comment
 * @property enum $award_story
 * @property string $mclient_salt
 * @property string $configuration
 * @property File $Avatar
 * @property Doctrine_Collection $Following
 * @property Doctrine_Collection $Followers
 * @property Doctrine_Collection $Tags
 * @property Doctrine_Collection $Permissions
 * @property Doctrine_Collection $Domains
 * @property Doctrine_Collection $Stories
 * @property UserStats $UserStats
 * @property Doctrine_Collection $Comment
 * @property Doctrine_Collection $NotificationMessage
 * @property Doctrine_Collection $StoryRating
 * @property Doctrine_Collection $StoryRender
 * @property Doctrine_Collection $Invitation
 * @property Doctrine_Collection $Sponsoring
 * @property Doctrine_Collection $Deal
 * @property Doctrine_Collection $History
 * @property Doctrine_Collection $ResetPasswordKey
 * @property Doctrine_Collection $RememberKey
 * @property Doctrine_Collection $EmailLookup
 * @property Doctrine_Collection $AuthUserKey
 * @property Doctrine_Collection $UserDomainSubscription
 * @property Doctrine_Collection $UserOnlineLog
 * @property Doctrine_Collection $Feed
 * 
 * @method integer             getId()                     Returns the current record's "id" value
 * @method string              getUsername()               Returns the current record's "username" value
 * @method string              getSalt()                   Returns the current record's "salt" value
 * @method string              getPassword()               Returns the current record's "password" value
 * @method boolean             getStatus()                 Returns the current record's "status" value
 * @method timestamp           getLastLogin()              Returns the current record's "last_login" value
 * @method string              getEmail()                  Returns the current record's "email" value
 * @method boolean             getPrivacy()                Returns the current record's "privacy" value
 * @method string              getLastIp()                 Returns the current record's "last_ip" value
 * @method integer             getFailedLogins()           Returns the current record's "failed_logins" value
 * @method integer             getAvatarId()               Returns the current record's "avatar_id" value
 * @method enum                getAwardComment()           Returns the current record's "award_comment" value
 * @method enum                getAwardStory()             Returns the current record's "award_story" value
 * @method string              getMclientSalt()            Returns the current record's "mclient_salt" value
 * @method string              getConfiguration()          Returns the current record's "configuration" value
 * @method File                getAvatar()                 Returns the current record's "Avatar" value
 * @method Doctrine_Collection getFollowing()              Returns the current record's "Following" collection
 * @method Doctrine_Collection getFollowers()              Returns the current record's "Followers" collection
 * @method Doctrine_Collection getTags()                   Returns the current record's "Tags" collection
 * @method Doctrine_Collection getPermissions()            Returns the current record's "Permissions" collection
 * @method Doctrine_Collection getDomains()                Returns the current record's "Domains" collection
 * @method Doctrine_Collection getStories()                Returns the current record's "Stories" collection
 * @method UserStats           getUserStats()              Returns the current record's "UserStats" value
 * @method Doctrine_Collection getComment()                Returns the current record's "Comment" collection
 * @method Doctrine_Collection getNotificationMessage()    Returns the current record's "NotificationMessage" collection
 * @method Doctrine_Collection getStoryRating()            Returns the current record's "StoryRating" collection
 * @method Doctrine_Collection getStoryRender()            Returns the current record's "StoryRender" collection
 * @method Doctrine_Collection getInvitation()             Returns the current record's "Invitation" collection
 * @method Doctrine_Collection getSponsoring()             Returns the current record's "Sponsoring" collection
 * @method Doctrine_Collection getDeal()                   Returns the current record's "Deal" collection
 * @method Doctrine_Collection getHistory()                Returns the current record's "History" collection
 * @method Doctrine_Collection getResetPasswordKey()       Returns the current record's "ResetPasswordKey" collection
 * @method Doctrine_Collection getRememberKey()            Returns the current record's "RememberKey" collection
 * @method Doctrine_Collection getEmailLookup()            Returns the current record's "EmailLookup" collection
 * @method Doctrine_Collection getAuthUserKey()            Returns the current record's "AuthUserKey" collection
 * @method Doctrine_Collection getUserDomainSubscription() Returns the current record's "UserDomainSubscription" collection
 * @method Doctrine_Collection getUserOnlineLog()          Returns the current record's "UserOnlineLog" collection
 * @method Doctrine_Collection getFeed()                   Returns the current record's "Feed" collection
 * @method User                setId()                     Sets the current record's "id" value
 * @method User                setUsername()               Sets the current record's "username" value
 * @method User                setSalt()                   Sets the current record's "salt" value
 * @method User                setPassword()               Sets the current record's "password" value
 * @method User                setStatus()                 Sets the current record's "status" value
 * @method User                setLastLogin()              Sets the current record's "last_login" value
 * @method User                setEmail()                  Sets the current record's "email" value
 * @method User                setPrivacy()                Sets the current record's "privacy" value
 * @method User                setLastIp()                 Sets the current record's "last_ip" value
 * @method User                setFailedLogins()           Sets the current record's "failed_logins" value
 * @method User                setAvatarId()               Sets the current record's "avatar_id" value
 * @method User                setAwardComment()           Sets the current record's "award_comment" value
 * @method User                setAwardStory()             Sets the current record's "award_story" value
 * @method User                setMclientSalt()            Sets the current record's "mclient_salt" value
 * @method User                setConfiguration()          Sets the current record's "configuration" value
 * @method User                setAvatar()                 Sets the current record's "Avatar" value
 * @method User                setFollowing()              Sets the current record's "Following" collection
 * @method User                setFollowers()              Sets the current record's "Followers" collection
 * @method User                setTags()                   Sets the current record's "Tags" collection
 * @method User                setPermissions()            Sets the current record's "Permissions" collection
 * @method User                setDomains()                Sets the current record's "Domains" collection
 * @method User                setStories()                Sets the current record's "Stories" collection
 * @method User                setUserStats()              Sets the current record's "UserStats" value
 * @method User                setComment()                Sets the current record's "Comment" collection
 * @method User                setNotificationMessage()    Sets the current record's "NotificationMessage" collection
 * @method User                setStoryRating()            Sets the current record's "StoryRating" collection
 * @method User                setStoryRender()            Sets the current record's "StoryRender" collection
 * @method User                setInvitation()             Sets the current record's "Invitation" collection
 * @method User                setSponsoring()             Sets the current record's "Sponsoring" collection
 * @method User                setDeal()                   Sets the current record's "Deal" collection
 * @method User                setHistory()                Sets the current record's "History" collection
 * @method User                setResetPasswordKey()       Sets the current record's "ResetPasswordKey" collection
 * @method User                setRememberKey()            Sets the current record's "RememberKey" collection
 * @method User                setEmailLookup()            Sets the current record's "EmailLookup" collection
 * @method User                setAuthUserKey()            Sets the current record's "AuthUserKey" collection
 * @method User                setUserDomainSubscription() Sets the current record's "UserDomainSubscription" collection
 * @method User                setUserOnlineLog()          Sets the current record's "UserOnlineLog" collection
 * @method User                setFeed()                   Sets the current record's "Feed" collection
 * 
 * @package    yigg
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user');
        $this->hasColumn('id', 'integer', 11, array(
             'primary' => true,
             'autoincrement' => true,
             'type' => 'integer',
             'length' => 11,
             ));
        $this->hasColumn('username', 'string', 32, array(
             'notnull' => true,
             'type' => 'string',
             'unique' => true,
             'length' => 32,
             ));
        $this->hasColumn('salt', 'string', 128, array(
             'notnull' => true,
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('password', 'string', 128, array(
             'notnull' => true,
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('status', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('last_login', 'timestamp', 25, array(
             'type' => 'timestamp',
             'length' => 25,
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'email' => true,
             'length' => 255,
             ));
        $this->hasColumn('privacy', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('last_ip', 'string', 15, array(
             'type' => 'string',
             'length' => 15,
             ));
        $this->hasColumn('failed_logins', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('avatar_id', 'integer', 20, array(
             'type' => 'integer',
             'length' => 20,
             ));
        $this->hasColumn('award_comment', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'bronze',
              1 => 'silver',
              2 => 'gold',
             ),
             ));
        $this->hasColumn('award_story', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'bronze',
              1 => 'silver',
              2 => 'gold',
             ),
             ));
        $this->hasColumn('mclient_salt', 'string', 64, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 64,
             ));
        $this->hasColumn('settings as configuration', 'string', 100000, array(
             'type' => 'string',
             'length' => 100000,
             ));


        $this->index('email', array(
             'fields' => 'email',
             ));
        $this->index('mclient_salt', array(
             'fields' => 'mclient_salt',
             ));
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('File as Avatar', array(
             'local' => 'avatar_id',
             'foreign' => 'id'));

        $this->hasMany('User as Following', array(
             'refClass' => 'UserFollowing',
             'local' => 'user_id',
             'foreign' => 'following_id'));

        $this->hasMany('User as Followers', array(
             'refClass' => 'UserFollowing',
             'local' => 'following_id',
             'foreign' => 'user_id'));

        $this->hasMany('Tag as Tags', array(
             'refClass' => 'UserTag',
             'local' => 'user_id',
             'foreign' => 'tag_id'));

        $this->hasMany('UserPermission as Permissions', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Domain as Domains', array(
             'refClass' => 'UserDomainSubscription',
             'local' => 'user_id',
             'foreign' => 'domain_id'));

        $this->hasMany('Story as Stories', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('UserStats', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Comment', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('NotificationMessage', array(
             'local' => 'id',
             'foreign' => 'sender_id'));

        $this->hasMany('StoryRating', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('StoryRender', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Invitation', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Sponsoring', array(
             'local' => 'id',
             'foreign' => 'invitation_user_id'));

        $this->hasMany('Deal', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('History', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('ResetPasswordKey', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('RememberKey', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('EmailLookup', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('AuthUserKey', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserDomainSubscription', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserOnlineLog', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Feed', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $yiggconfigurable0 = new yiggConfigurable(array(
             ));
        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $yiggsoftdelete0 = new yiggSoftDelete(array(
             ));
        $yiggtaggable0 = new yiggTaggable(array(
             ));
        $this->actAs($yiggconfigurable0);
        $this->actAs($timestampable0);
        $this->actAs($yiggsoftdelete0);
        $this->actAs($yiggtaggable0);
    }
}