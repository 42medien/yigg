<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class StoryRatingTable extends Doctrine_Table {

  /**
   * return instance of current table
   *
   * @return Doctrine_Table
   */
  public static function getTable() {
    return Doctrine_Manager::getInstance()->getTable('StoryRating');
  }

  /**
   * count all ratings for story
   *
   * @param   Story      $story
   * @return  integer
   */
  public static function getCount( $story) {
    $query = Doctrine_Query::create()
        ->select('id')
        ->from('Rating r')
        ->innerJoin('r.StoryRating sr')
        ->where('sr.story_id = ?', $story->id);
    return $query->count();
  }

  /**
   * count all ratings for story
   *
   * @param   Story      $story
   * @return  integer
   */
  public static function getCountById($story_id) {
    $query = Doctrine_Query::create()
        ->select('id')
        ->from('StoryRating sr')
        ->where('sr.story_id = ?', $story_id);
    return $query->count();
  }

  /**
   * Returns story rating(s) based on the user
   */
  public static function retrieveByUser( $user = null) {
    $query = Doctrine_Query::create()->from('StoryRating sr')->innerJoin('sr.Rating r');

    if( true == $user->hasUser() ){
      $query->where('sr.user_id = ?', $user->id);
    } else {
      $query->where('r.ip_address = ?',$_SERVER['REMOTE_ADDR']);
    }
    return $query->execute();
  }

  /**
   * Returns the Story Ratings indexed by story if the user has rated or not.
   * Passing no user, will just check by IP
   *
   * @param int $story_id
   * @param User $user
   * @return Doctrine_Collection
   */
  public static function retrieveHasRated( $story_id , $user = null ) {
    $query = Doctrine_Query::create()
      ->select("id")
      ->from('StoryRating sr')
      ->where('sr.story_id = :story_id ', array(":story_id" => $story_id));

    if( isset($user['id']) ) {
      $query->innerJoin('sr.Rating r');
      $query->addWhere('sr.user_id = :userid', array( ':userid' => $user['id'] ));
    } else {
      $query->innerJoin('sr.Rating r');
      $query->addWhere('r.ip_address = :ip', array(":ip" =>sfContext::getInstance()->getRequest()->getRemoteAddress() ));
    }
    return $query->count() > 0;
  }

  /**
   * Returns the storyRatings if the user has voted on a list of story id's
   *
   * @param Doctrine_Collection (indexed by story_id) $story_ids
   * @param User $user
   * @return Doctrine_Collection
   */
  public static function retrieveHasRatedOn( $story_ids , $user = null ) {
    $query = Doctrine_Query::create()
      ->select("sr.*, r.*")
      ->from('StoryRating sr INDEXBY sr.story_id')
      ->innerJoin('sr.Rating r')
      ->groupBy("sr.story_id");

    if(count($story_ids) > 0 ) {
      $query->addWhere('sr.story_id IN ('. implode(", ",$story_ids). ')');
    }
    
    if( isset($user['id']) ) {
      $query->addWhere('sr.user_id = ?', array( $user['id'] ));
    } else {
      $ip_address = sfContext::getInstance()->getRequest()->getRemoteAddress();
      $query->addWhere('r.ip_address = ? ', $ip_address);
    }

    return $query->execute(array(), Doctrine::HYDRATE_ARRAY);
  }

  /**
   * Retrieves storyRatings by story...
   *
   * @param unknown_type $story
   * @return unknown
   */
  public static function retrieveByStory( $story ) {
    $query = Doctrine_Query::create()
      ->select('sr.*')
      ->from('StoryRating sr')
      ->where('sr.story_id = ? AND user_id <> 1', $story['id']);
    return $query->execute();
  }
}